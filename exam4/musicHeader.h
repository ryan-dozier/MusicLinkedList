#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <time.h>
#define PAUSE system("pause")
#define CLS system("cls")
#define TRUE 1
#define FALSE 0
#define UNKNOWNYEAR 9999

//	SONG is an element we store within a dynamic array. It represents the data for each induvidual song on an album
typedef struct
{
	int trackNum;		//	The track number of the song
	char songName[40];	//	The Name of the song
} SONG;	//	END SONG
 
//	CD is the data on each album we are storing
typedef struct
{
	char albumName[50];		//	The Name of the Album
	char artist[30];		//	The Name of the Artist
	int year;				//	The Year the album was Released
	int numSongs;			//	The Number of songs on the Album
	SONG** songs;			//	The pointer to the array of SONGs
	time_t dateImported;	//	The Time the Album was Imported into the Collection
} CD;	//	END CD

//	CDNODE is the location in memory we will store each element in our list
typedef struct node
{
	CD currentCd;					//	The data of the current Album
	struct node* nextByEntered;		//	The pointer to the next album by dateImported
	struct node* nextByArtist;		//	The pointer to the next album by Alphabedical Artist Name
	struct node* nextByYear;		//	The pointer to the next album by Numerical year
	struct node* nextByAlbum;		//	The pointer to the next album by Alphabedical Album Name
} CDNODE;	//	END CDNODE

//	COLLECTION is the head, beginning, of our list
typedef struct
{
	CDNODE* head;	//	The first location in memory for the list
	int numCds;		//	The numerical number of albums stored in the list
} COLLECTION;	// END COLLECTION



/****************************************************************************
*				List of Functions											*
*		1)	int testAlphaOrder(char a[], char b[])							*
*		2)	int scanINT()													*
*		3)	float scanFloat()												*
*		4)	char scanCHAR()													*
****************************************************************************/

/*******************************************************************************************************
Function		:	testAlphaOrder
Data Required	:	Two strings to compare the first letters
Data Returned	:	A flag value based on which string comes first
Purpose			:	To test which string comes first alphabedically
********************************************************************************************************/

int testAlphaOrder(char a[], char b[])
{
#define STRINGLENGTH 30
	unsigned int x = 0;
	char testA[STRINGLENGTH];
	char testB[STRINGLENGTH];
	int stringFlag;

	strcpy(testA, a);
	for (x = 0; x < strlen(testA); x++)		//	loops once for the length of the string
	{	//	BEGIN for
		if (isupper(testA[x]))				//	tests if the current character in the string is uppercase
			testA[x] = tolower(testA[x]);	//	changes uppercase characters to lowercase for testing
	}	//	END for

	strcpy(testB, b);
	for (x = 0; x < strlen(testB); x++)		//	loops once for the length of the string
	{	//	BEGIN for
		if (isupper(testB[x]))				//	tests if the current character in the string is lowercase
			testB[x] = tolower(testB[x]);	//	changes uppercase characters to lowercase for testing
	}	//	END for

	stringFlag = strcmp(testA, testB);	//	negative  : when string 1 comes before string 2
	//	postitive : when string 2 comes before string 1
	//	zero	  : when string 1 is equal to  string 2
	return stringFlag;
}	//	END testAlphaOrder


/*******************************************************************************************************
Function		:	scanINT
Data Required	:	NONE
Data Returned	:	An int generated by the user
Purpose			:	This function is a modified scanf("%d",value); to include error checking
********************************************************************************************************/
int scanINT()
{
	int result;

	do
	{
		if (scanf("%d", &result)) // Returns TRUE when result is an int 
			return result;
		else
			printf("\n\n\tEnter a valid Integer\n\t");
		PAUSE;
	} while (TRUE); // this loop terminates once result is valid
}	// END scanINT


/*******************************************************************************************************
Function		:	scanFLOAT
Data Required	:	NONE
Data Returned	:	A float generated by the user
Purpose			:	This function is a modified scanf("%f",value); to include error checking
********************************************************************************************************/
float scanFLOAT()
{
	float result;

	do
	{
		if (scanf("%f", &result)) // Returns TRUE when result is a float
			return result;
		else
			printf("\n\n\tEnter a valid Floating Point\n\t");
		PAUSE;
	} while (TRUE); // this loop terminates once result is valid
}	// END scanFLOAT


/*******************************************************************************************************
Function:		scanCHAR
Data Required:	NONE
Data Returned:	A char generated by the user
Purpose:		This function is a modified scanf(" %c",value); to include error checking
********************************************************************************************************/
char scanCHAR()
{
	char result;

	do
	{
		if (scanf(" %c", &result)) // Returns TRUE when result is a char
			return result;
		else
			printf("\n\n\tEnter a valid Character\n\t");
		PAUSE;
	} while (TRUE); // this loop terminates once result is valid
}	// END scanCHAR